<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="yjc.wdb.mapper.TileMapper">

<insert id="insertTile">
insert into tile
	(TILE_NM, TILE_CRDNT_X, TILE_CRDNT_Y, DRW_CODE)
values(#{tile_nm}, #{tile_crdnt_x}, #{tile_crdnt_x}, #{drw_code})
</insert>

<!-- 
	도면 등록할 때 처음 등록되는 타일을 한번에 등록시키기 위해서 사용하려 해보았지만 실패
	이유는 한번에 두개 테이블에 동시에 데이터를 넣어야 해서임. 일단 쉽게짜고 추후에 수정 가능하다면 사용할 계획
 -->
<insert id="insertDrawingTile" parameterType="java.util.Map">
insert into tile
	(TILE_NM, TILE_CRDNT_X, TILE_CRDNT_Y, DRW_CODE)
values
<foreach collection="tileList" item="tile" separator=",">
        ( #{tile.tile_nm}, #{tile.tile_crdnt_x}, #{tile.tile_crdnt_y}, #{tile.drw_code} )
</foreach>
</insert>


<!-- 존재하는 타일리스트 전부를 뽑아옴, 여기서 비콘이 셋팅되어 있으면 셋팅된 비콘의 메이저 마이너를 얻어옴 -->
<select id="selectTileList" resultType="java.util.HashMap">
select
	t.TILE_NM tile_nm, b.BEACON_MJR beacon_mjr, b.BEACON_MNR beacon_mnr
from
	tile t LEFT OUTER JOIN beacon b
ON
	t.BEACON_CODE = b.BEACON_CODE
</select>

<select id="selectTileListUp" resultType="java.util.HashMap">
select
	*
from
	tile
where
	drw_code	=	(
						select
							drw_code
						from
							floor_information
						where
							bhf_code = #{bhf_code}
						and
							FLOORINFO_FLOOR = #{floor}
						order by FLOORINFO_RGSDE desc, drw_code desc
						limit 0,1
					)
</select>

<!-- 타일 비콘 등록할 때 쓸 것 -->
<update id="updateTileBeaconSet">
update
	tile
set
	BEACON_CODE =	(
						select
							BEACON_CODE
						from
							beacon
						where
							BEACON_MJR = #{beacon_mjr}
						and
							BEACON_MNR = #{beacon_mnr}
					)
where
	TILE_CODE = #{tile_code}
</update>

<!-- 매장 등록 페이지에서 셋팅된 타일 클릭시 해당 타일 셋팅정보 끌고오는 쿼리문 -->
<select id="selectTile_LocationOne" resultType="java.util.HashMap">
select
	t.tile_code, t.tile_nm, b.beacon_code, b.beacon_mjr, b.beacon_mnr

from
	tile t
LEFT OUTER JOIN
	beacon b
ON
	t.BEACON_CODE = b.BEACON_CODE

where
	DRW_CODE = #{drw_code}
and
	TILE_CRDNT_X = #{tile_crdnt_x}
and
	TILE_CRDNT_Y = #{tile_crdnt_y}
</select>

<select id="tile_goods" resultType="java.util.HashMap">
select concat(floor((year(curDate()) - date_format(u.USER_BRTHDY,
			'%Y') +
			1)/10)
			*10,'/' , u.USER_SEXDSTN , '/' , u.USER_MRRG_AT) as user_group,
		sum(g.GOODS_PC *
		pg.PURCHSGOODS_QY -
		if(isnull(pg.COUPON_CODE), 0,
		if(c.COUPON_DSCNT
		like '%@%' escape '@',
		g.GOODS_PC * (trim(trailing
		'%' from
		c.COUPON_DSCNT)/100),
		c.COUPON_DSCNT))) as totalPrice from bill b, goods g, purchase_goods pg left
		outer join coupon c on
		pg.COUPON_CODE =
		c.COUPON_CODE, user u where b.user_id in (select distinct user_id from course where 
		tile_code = (select tile_code from tile where drw_code = #{drw_code} 
		and tile_crdnt_x = #{tile_crdnt_x} and tile_crdnt_y = #{tile_crdnt_y})) and b.BILL_CODE = pg.BILL_CODE
		and pg.GOODS_CODE = g.GOODS_CODE and pg.GOODS_CODE in(select goods_code from goods_location
		where tile_code = (select tile_code from tile where drw_code = #{drw_code} 
		and tile_crdnt_x = #{tile_crdnt_x} and tile_crdnt_y = #{tile_crdnt_y})) and b.user_id = u.user_id
		group by u.USER_SEXDSTN, u.USER_MRRG_AT, floor((year(curDate()) - date_format(USER_BRTHDY,
			'%Y') +
			1)/10)
			*10;
</select>

<select id="avgStayTime" resultType="java.util.HashMap">
			select concat(floor((year(curDate()) - date_format(u.USER_BRTHDY,
			'%Y') +
			1)/10)
			*10,'/' , u.USER_SEXDSTN , '/' , u.USER_MRRG_AT) as user_group, avg(cours_stay_time) as avgStayTime 
			from course c, user u where c.USER_ID = u.USER_ID and c.TILE_CODE = (select tile_code from tile where drw_code = #{drw_code}
			and tile_crdnt_x = #{tile_crdnt_x} and tile_crdnt_y = #{tile_crdnt_y})
			and (cours_stay_time is not null and cours_stay_time != 0)
 			group by floor((year(curDate()) - date_format(u.USER_BRTHDY,
			'%Y') +
			1)/10)
			*10, u.USER_SEXDSTN, u.USER_MRRG_AT
			
</select>

<select id="goods_locationList" resultType="GoodsVO">

	select g.goods_code, g.goods_nm, g.goods_pc
	from goods g, goods_location gl
	where g.goods_code = gl.goods_code and
	tile_code = #{tile_code}

</select>

<delete id="deleteLo">
delete from detail_category_location 
where
	TILE_CODE IN	(
						select
							TILE_CODE
						from
							tile
						where
							DRW_CODE = #{drw_code}
					)
</delete>
<delete id="deleteForRegister_position" parameterType="java.util.Map">
delete from detail_category_location
where
	TILE_CODE IN	(
						select
							TILE_CODE
						from
							tile
						where
							(TILE_CRDNT_X, TILE_CRDNT_Y) IN 
								<foreach collection="tileList" item="item" index="index"
								separator="," open="(" close=")">
									( #{item.tile_crdnt_x}, #{item.tile_crdnt_y} )
								</foreach>
						and
							DRW_CODE = #{drw_code}
					)
</delete>

<insert id="insertDetail_category_location" parameterType="java.util.Map">
insert into detail_category_location
	(DETAILCTGRY_CODE, TILE_CODE, DETAILCTGRYLC_APPLC_DE)
values
<foreach collection="tileList" item="item" index="index"
	separator="," open="" close="">
		(
			#{item.detailctgry_code}, 
			(
				select 
					TILE_CODE 
				from 
					tile 
				where 
					TILE_CRDNT_X = #{item.tile_crdnt_x} 
				and 
					TILE_CRDNT_Y = #{item.tile_crdnt_y}
				and
					DRW_CODE = #{drw_code}
			),
			now()
		)
</foreach>

</insert>


<delete id="deleteGoodsLo">
delete from goods_location 
where
	TILE_CODE IN	(
						select
							TILE_CODE
						from
							tile
						where
							DRW_CODE = #{drw_code}
					)
</delete>


<insert id="insertGoods_location" parameterType="java.util.Map">
insert into goods_location
	(goods_code, TILE_CODE)
values
<foreach collection="goodsList" item="item" index="index"
	separator="," open="" close="">
		(
			#{item.goods_code}, 
			(
				select 
					TILE_CODE 
				from 
					tile 
				where 
					TILE_CRDNT_X = #{item.tile_crdnt_x} 
				and 
					TILE_CRDNT_Y = #{item.tile_crdnt_y}
				and
					DRW_CODE = #{drw_code}
			)
		)
</foreach>
</insert>


<delete id="deleteCourse" parameterType="java.util.Map">
delete from course
where
	TILE_CODE IN	(
						select
							TILE_CODE
						from
							tile
						where
							(TILE_CRDNT_X, TILE_CRDNT_Y) IN 
								<foreach collection="tileList" item="item" index="index"
								separator="," open="(" close=")">
									( #{item.tile_crdnt_x}, #{item.tile_crdnt_y} )
								</foreach>
						and
							DRW_CODE = #{drw_code}
					)
</delete>




</mapper>